# Inventory Database File
# Version 2.0
# Description: Database system with menu that gives Search, Modify Stock, and Low Stock Notification (with individual notification clearing).



import java.io.*;
import java.util.*;

public class ExcelReader {
	// Sets a final String to the path of the database
    private static final String FILE_PATH = "Inventory.csv";
    // Scanner
    private static Scanner scanner = new Scanner(System.in);
    // Low stock threshold
    private static final int STOCK_THRESHOLD = 120;
    // Set to store excluded drug IDs from notifications
    private static Set<String> excludedFromNotifications = new HashSet<>();

    public static void main(String[] args) {
	// Start of Pharmacy Inventory System
        System.out.println("=== Pharmacy Inventory System ===");
        boolean exit = false;
        // Start of while loop, with exit
        while (!exit) {
	    // displays menu options
            displayMenu();
            String choice = scanner.nextLine().trim();
	    // options for the Inventory control system
            switch (choice) {
                case "1":
                    viewCatalog();
                    break;
                case "2":
                    searchDatabase();
                    break;
                case "3":
                    showNotifications();
                    break;
                case "4":
                    exit = true;
                    System.out.println("Exiting the system. Goodbye!");
                    break;
                default:
                    System.out.println("Invalid option. Please select 1, 2, 3, or 4.");
            }
        }

        scanner.close();
    }

    // Displays the main menu
    private static void displayMenu() {
        System.out.println("\nPlease select an option:");
        System.out.println("1. View Drug Catalog");
        System.out.println("2. Search Database");
        System.out.println("3. Notifications");
        System.out.println("4. Exit");
        System.out.print("Enter your choice: ");
    }

    // Prints out the entire course catalog
    private static void viewCatalog() {
        System.out.println("\n=== Drug Catalog ===");
        try {
            readCSV(FILE_PATH);
        } catch (IOException e) {
            System.err.println("Error reading the catalog: " + e.getMessage());
        }
    }

    // Asks if wanting to search by name or ID
    private static void searchDatabase() {
        System.out.println("\nSearch by:");
        System.out.println("1. Drug ID");
        System.out.println("2. Drug Name");
        System.out.print("Enter your choice: ");
        String searchChoice = scanner.nextLine().trim();

        List<String[]> results = new ArrayList<>();

        switch (searchChoice) {
            case "1":
                System.out.print("Enter Drug ID: ");
                String id = scanner.nextLine().trim();
                try {
                    results = searchCSVByField(FILE_PATH, 0, id); // Assuming ID is the first column
                } catch (IOException e) {
                    System.err.println("Error searching by ID: " + e.getMessage());
                    return;
                }
                break;
            case "2":
                System.out.print("Enter Drug Name: ");
                String name = scanner.nextLine().trim();
                try {
                    results = searchCSVByField(FILE_PATH, 1, name); // Assuming Name is the second column
                } catch (IOException e) {
                    System.err.println("Error searching by Name: " + e.getMessage());
                    return;
                }
                break;
            default:
                System.out.println("Invalid search option.");
                return;
        }

        if (results.isEmpty()) {
            System.out.println("No matching records found.");
            return;
        }

        System.out.println("\n=== Search Results ===");
        printResults(results);

        // Lets user choose if there is multiple results
        if (results.size() > 1) {
            System.out.print("\nEnter the ID of the Drug you want to modify: ");
            String targetID = scanner.nextLine().trim();
            Optional<String[]> selectedRecord = results.stream()
                    .filter(record -> record[0].equalsIgnoreCase(targetID))
                    .findFirst();

            if (selectedRecord.isPresent()) {
                modifyStock(selectedRecord.get()[0]);
            } else {
                System.out.println("Invalid ID selected.");
            }
        } else {
            // Modifies if there is only one
            String targetID = results.get(0)[0];
            modifyStock(targetID);
        }
    }

    // Shows the low stock notifications
    private static void showNotifications() {
        System.out.println("\n=== Low Stock Notifications ===");
        List<String[]> lowStockMedications = new ArrayList<>();

        try {
            lowStockMedications = getLowStockMedications(FILE_PATH, STOCK_THRESHOLD);
        } catch (IOException e) {
            System.err.println("Error reading the inventory: " + e.getMessage());
            return;
        }

        if (lowStockMedications.isEmpty()) {
            System.out.println("All medications are sufficiently stocked.");
            return;
        }

        System.out.println("Medications with stock quantity of " + STOCK_THRESHOLD + " or less:");
        printResults(lowStockMedications);

        // Removes a drug from the notifications list
        manageNotifications(lowStockMedications);
    }

    // Removing a drug from the notifications
    private static void manageNotifications(List<String[]> lowStockMedications) {
        while (true) {
            System.out.print("\nDo you want to remove any drug from the notifications list? (Y/N): ");
            String response = scanner.nextLine().trim().toUpperCase();

            if (response.equals("Y")) {
                System.out.print("Enter the ID of the Drug to remove from notifications: ");
                String removeID = scanner.nextLine().trim();

                // Checks if the ID is part of the low stock notifications
                boolean exists = lowStockMedications.stream()
                        .anyMatch(record -> record[0].equalsIgnoreCase(removeID));

                if (exists) {
                    if (excludedFromNotifications.contains(removeID.toUpperCase())) {
                        System.out.println("Drug ID " + removeID + " is already excluded from notifications.");
                    } else {
                        excludedFromNotifications.add(removeID.toUpperCase());
                        System.out.println("Drug ID " + removeID + " has been removed from notifications.");
                    }
                } else {
                    System.out.println("Drug ID " + removeID + " is not in the current notifications list.");
                }
            } else if (response.equals("N")) {
                break;
            } else {
                System.out.println("Invalid input. Please enter 'Y' or 'N'.");
            }
        }
    }

    // Function to modify stock quantity
    private static void modifyStock(String targetID) {
        String newStock;
        while (true) {
            System.out.print("Enter the new Stock Quantity: ");
            newStock = scanner.nextLine().trim();
            if (newStock.matches("\\d+")) { // Ensures input is a positive integer
                break;
            } else {
                System.out.println("Invalid input. Please enter a numeric value.");
            }
        }

        try {
            updateCSV(FILE_PATH, targetID, newStock);
            System.out.println("Stock quantity updated successfully.");
            System.out.println("\n=== Updated Data ===");
            readCSV(FILE_PATH);
        } catch (IOException e) {
            System.err.println("Error updating stock quantity: " + e.getMessage());
        }
    }

    // Reads and displays the contents of the CSV File
    private static void readCSV(String filePath) throws IOException {
        File file = new File(filePath);
        if (!file.exists()) {
            System.out.println("The inventory file does not exist.");
            return;
        }

        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line;
        boolean isHeader = true;

        while ((line = reader.readLine()) != null) {
            String[] fields = line.split(",", -1); // -1 to include trailing empty strings
            if (isHeader) {
                // Format header for formatting (readability)
                System.out.printf("%-10s %-30s %-20s %-20s %-15s %-15s %-30s%n",
                        fields[0], fields[1], fields[2], fields[3], fields[4], fields[5], fields[6]);
                isHeader = false;
            } else {
                if (fields.length >= 7) {
                    System.out.printf("%-10s %-30s %-20s %-20s %-15s %-15s %-30s%n",
                            fields[0], fields[1], fields[2], fields[3], fields[4], fields[5], fields[6]);
                } else {
                    System.out.println("Incomplete record: " + String.join(",", fields));
                }
            }
        }

        reader.close();
    }

    // Function that searches the CSV file columns
    private static List<String[]> searchCSVByField(String filePath, int columnIndex, String searchTerm) throws IOException {
        List<String[]> matchedRecords = new ArrayList<>();
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line;
        boolean isHeader = true;

        while ((line = reader.readLine()) != null) {
            String[] fields = line.split(",", -1); // -1 to include trailing empty strings
            if (isHeader) {
                isHeader = false;
                continue; // Skip header
            }
            if (fields.length > columnIndex && fields[columnIndex].equalsIgnoreCase(searchTerm)) {
                matchedRecords.add(fields);
            }
        }

        reader.close();
        return matchedRecords;
    }

    // Function to update the CSV File
    private static void updateCSV(String filePath, String targetID, String newStock) throws IOException {
        File file = new File(filePath);
        File tempFile = new File("temp.csv");

        BufferedReader reader = new BufferedReader(new FileReader(file));
        FileWriter writer = new FileWriter(tempFile);

        String line;
        boolean updated = false;
        boolean isHeader = true;

        try {
            while ((line = reader.readLine()) != null) {
                String[] fields = line.split(",", -1); // -1 to include trailing empty strings
                if (isHeader) {
                    writer.write(line + "\n"); // Write header as is
                    isHeader = false;
                    continue;
                }

                if (fields.length >= 7 && fields[0].equalsIgnoreCase(targetID)) {
                    fields[4] = newStock; // Assuming Stock Quantity is the 5th column (index 4)
                    updated = true;
                    System.out.println("Updated record: " + String.join(",", fields));
                }
                writer.write(String.join(",", fields) + "\n");
            }
        } finally {
            reader.close();
            writer.close();
        }

        if (updated) {
            // Replace original file with the temp file
            if (!file.delete()) {
                System.err.println("Error deleting original file. Ensure no other process is using it.");
                return;
            }
            if (!tempFile.renameTo(file)) {
                System.err.println("Error renaming temporary file to original file name. Check permissions.");
            }
        } else {
            tempFile.delete(); // Clean up the temp file if no updates were made
            System.out.println("No matching ID found. No updates made.");
        }
    }

    // Print search results in a formatted way
    private static void printResults(List<String[]> records) {
        if (records.isEmpty()) {
            System.out.println("No records to display.");
            return;
        }

        // Print header
        String[] header = {"ID", "Drug Name", "Generic Names", "Brand Name", "Stock Quantity", "Unit Price ($)", "Supplier"};
        System.out.printf("%-10s %-30s %-20s %-20s %-15s %-15s %-30s%n",
                header[0], header[1], header[2], header[3], header[4], header[5], header[6]);

        // Print each record
        for (String[] record : records) {
            if (record.length >= 7) {
                System.out.printf("%-10s %-30s %-20s %-20s %-15s %-15s %-30s%n",
                        record[0], record[1], record[2], record[3], record[4], record[5], record[6]);
            } else {
                System.out.println("Incomplete record: " + String.join(",", record));
            }
        }
    }

    // Get medications with stock quantity of STOCK_THRESHOLD or less, excluding those in the exclusion list
    private static List<String[]> getLowStockMedications(String filePath, int threshold) throws IOException {
        List<String[]> lowStockRecords = new ArrayList<>();
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line;
        boolean isHeader = true;

        while ((line = reader.readLine()) != null) {
            String[] fields = line.split(",", -1); 
            if (isHeader) {
                isHeader = false;
                continue; // Skip header
            }
            if (fields.length >= 7) {
                String stockStr = fields[4];
                String id = fields[0].toUpperCase();
                // Exclude if ID is in the exclusion list
                if (excludedFromNotifications.contains(id)) {
                    continue;
                }
                try {
                    int stock = Integer.parseInt(stockStr);
                    if (stock <= threshold) {
                        lowStockRecords.add(fields);
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Invalid stock quantity for ID " + fields[0] + ": " + stockStr);
                }
            }
        }

        reader.close();
        return lowStockRecords;
    }
}
